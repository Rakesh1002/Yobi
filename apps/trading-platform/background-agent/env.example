# ==============================================
# YOBI BACKGROUND AGENT ENVIRONMENT CONFIGURATION
# ==============================================
# Copy this file to .env and update with your actual values

# ==================== WEB SEARCH ====================
# SearXNG - Self-hosted search engine (primary)
SEARXNG_URL=http://localhost:8080
SEARXNG_SECRET_KEY=16b7JskJjrrQoMKXWyoMAoVV7MwXl4rItkCUkRL4aDM=

# External search APIs (optional fallbacks)
TAVILY_API_KEY=your_tavily_api_key_here
EXA_API_KEY=your_exa_api_key_here
SERP_API_KEY=your_serp_api_key_here

# ==================== CORE API KEYS ====================
# AI/ML Services
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# ==================== DATABASE ====================
DATABASE_URL=your_postgresql_database_url_here

# ==================== CACHE/REDIS ====================
# For caching and background jobs
REDIS_URL=redis://localhost:6379
# OR for Upstash Redis
UPSTASH_REDIS_REST_URL=your_upstash_redis_url_here
UPSTASH_REDIS_REST_TOKEN=your_upstash_redis_token_here

# ==================== STORAGE ====================
# AWS S3 for document storage
AWS_ACCESS_KEY_ID=y
AWS_SECRET_ACCESS_KEY=
AWS_REGION=
AWS_S3_BUCKET=

# ==================== SEARCH CONFIGURATION ====================
# Search engine priorities (searxng first)
SEARCH_ENGINE_PRIORITY=searxng,tavily,exa,serp
DEFAULT_SEARCH_SOURCE=searxng
SEARXNG_TIMEOUT=10000
SEARXNG_MAX_RESULTS=25

# Search processing settings
ENABLE_CONTENT_PROCESSING=true
ENABLE_INTELLIGENT_FILTERING=true
MAX_QUALITY_RESULTS=15
SEARCH_TIME_RANGE=month

# ==================== SCHEDULING ====================
# Dynamic scheduling enabled
ENABLE_DYNAMIC_SCHEDULING=true

# Asset class frequencies (in minutes)
STOCK_FREQUENCY=5                    # Equities: every 5 minutes
ETF_FREQUENCY=1440                   # ETFs: daily (1440 minutes)
MUTUAL_FUND_FREQUENCY=1440           # Mutual funds: daily
CRYPTO_FREQUENCY=1                   # Crypto: every minute
COMMODITY_FREQUENCY=15               # Commodities: every 15 minutes
FOREX_FREQUENCY=5                    # Forex: every 5 minutes
BOND_FREQUENCY=60                    # Bonds: every hour

# Volume-based frequency multipliers (lower = more frequent)
VOLUME_VERY_HIGH_MULTIPLIER=0.5      # >10M volume: 2x more frequent
VOLUME_HIGH_MULTIPLIER=0.75          # 1M-10M volume: 1.33x more frequent
VOLUME_MEDIUM_MULTIPLIER=1.0         # 100K-1M volume: base frequency
VOLUME_LOW_MULTIPLIER=2.0            # <100K volume: 2x less frequent

# Market cap frequency multipliers
LARGE_CAP_MULTIPLIER=0.8             # >$10B: slightly more frequent
MID_CAP_MULTIPLIER=1.0               # $2B-$10B: base frequency
SMALL_CAP_MULTIPLIER=1.2             # $300M-$2B: slightly less frequent
MICRO_CAP_MULTIPLIER=1.5             # <$300M: less frequent

# Legacy scheduling (deprecated - use dynamic scheduling instead)
ENABLE_MARKET_SCAN=false
ENABLE_COMPANY_ANALYSIS=false
ENABLE_DOCUMENT_DISCOVERY=false
ENABLE_INSIGHT_GENERATION=false
ENABLE_EARNINGS_UPDATES=false
ENABLE_NEWS_MONITORING=false

# ==================== AGENT CONFIGURATION ====================
# Background processing
AGENT_CONCURRENCY=3
AGENT_BATCH_SIZE=10
AGENT_RETRY_ATTEMPTS=3
AGENT_PROCESSING_DELAY=5000
AUTO_START=true
AUTO_PROCESS_EXISTING_INSTRUMENTS=true

# Enhanced search features
ENABLE_ADVANCED_SEARCH=true
ENABLE_CONTENT_PROCESSING=true
ENABLE_INTELLIGENT_FILTERING=true

# ==================== PERFORMANCE ====================
# Resource management
MAX_CONCURRENT_TASKS=50
RESOURCE_POOL_SIZE=10
HEALTH_CHECK_INTERVAL=30000
CLEANUP_INTERVAL=300000

# Caching
ENABLE_CACHING=true
CACHE_TIMEOUT=7200
ENABLE_METRICS=true
METRICS_RETENTION=86400000

# Timeouts
SEARCH_TIMEOUT=30000
DOCUMENT_TIMEOUT=60000
INSIGHT_TIMEOUT=120000

# ==================== LOGGING ====================
LOG_LEVEL=info
NODE_ENV=development

# ==================== STARTUP NOTES ====================
# Before starting the background agent:
# 1. Start SearXNG: cd apps/trading-platform/searxng && docker-compose up -d
# 2. Verify SearXNG at: http://localhost:8080
# 3. Start Redis if using local Redis
# 4. Ensure database is accessible 